#!/bin/bash
# -----------------------------------------------------------------------------------------
# This script is aiming at ploting all time series generated by msbas2 that are in current dir
# 
# Parameters are : - none
#
# Dependencies:	- gnuplot
#				- gmt
#				- __HardCodedLines.sh
#
# Hard coded:	- Some hard coded info about plot style : title, range, font, color...
#
# New in Distro V 1.0:	- Based on developpement version and Beta V1.1.
# New in Distro V 1.1:	- Also OK for plot with rms from msbasv3
# New in Distro V 1.2:	- Plot only time series starting with MSBAS_*.txt (may be from a given version of msbas - see line 34 if needed) 
# New in Distro V 1.3:	- accounts for usage with msbasv4, i.e. that requires additional info in header files 
# New in Distro V 1.4:	- add creation date label
# New in Distro V 2.0:	- Use hard coded lines definition from __HardCodedLines.sh
# New in Distro V 3.0 20230830:	- Rename SCRIPTS_OK directory as SCRIPTS_MT 
#								- Replace CIS by MT in names 
#								- Renamed FUNCTIONS_FOR_MT.sh
#
# MasTer: InSAR Suite automated Mass processing Toolbox. 
# NdO (c) 2016/03/08 - could make better... when time.
# -----------------------------------------------------------------------------------------
PRG=`basename "$0"`
VER="Distro V3.0 MasTer script utilities"
AUT="Nicolas d'Oreye, (c)2016-2019, Last modified on Aug 30, 2023"
echo " "
echo "${PRG} ${VER}, ${AUT}"
echo " " 

# vvv ----- Hard coded lines to check --- vvv 
source ${PATH_SCRIPTS}/SCRIPTS_MT/__HardCodedLines.sh
	# Get name of the institue $INSTITUTE where computation is performed (defined as a function in __HardCodedLines.sh)
	Institue
# ^^^ ----- Hard coded lines to check --- ^^^ 

# which msbas ?
CHECKMSBASV1=`which msbas | wc -l`
CHECKMSBASV2=`which msbasv2 | wc -l`
CHECKMSBASV3=`which msbasv3 | wc -l`
CHECKMSBASV4=`which msbasv4 | wc -l`

if [ ${CHECKMSBASV1} -gt 0 ] ; then MSBAS="msbasv1" ; fi  	
if [ ${CHECKMSBASV2} -gt 0 ] ; then MSBAS="msbasv2" ; fi  	
if [ ${CHECKMSBASV3} -gt 0 ] ; then MSBAS="msbasv3" ; fi  		
if [ ${CHECKMSBASV4} -gt 0 ] ; then MSBAS="msbasv4" ; fi  

for FILE in `ls MSBAS_*.txt`
do  
	TSFILE=$(basename "$FILE")
	
	if [ ${MSBAS} == "msbasv1" ] ; then 
			#files are generated by msbas2 and are as follow: 
			#MSBAS_ROW_COL_RADIUS.ts
			#and are filled with lines such as 
			#eg : 		20151205T041135 2015.926506 0.000000 0.000000
			#that is : dummy 			decimadate 	up 		 ew
			
			ROW=`echo ${TSFILE} | cut -d _ -f 2`
			COL=`echo ${TSFILE} | cut -d _ -f 3`
			RAD=`echo ${TSFILE} | cut -d _ -f 4 | cut -d . -f 1`
			
# Do not indent below			
${PATHGNU}/gnuplot << EOF
	set terminal postscript color eps enhanced  "Helvetica,24"
	set output "${TSFILE}.eps"
#	set output "lcurveNoLog.eps"
	set   autoscale                        # scale axes automatically
    unset label                            # remove any previous labels
    set xtic auto                          # set xtics automatically
    set ytic auto                          # set ytics automatically
    set title "Pixel ${ROW}-${COL}, radius ${RAD}"
    set xlabel "Date" font "Helvetica,24"
    set ylabel "up and ew [m]" font "Helvetica,24"
	#set ytics font "Helvetica,24" 
	set xtics font "Helvetica,16" 
	#set size 1.5,1.5
	#set pointsize 1
	#set xtics 0.5	
	set key left top
	
	set timestamp "Created by MasTer at ${INSTITUTE} on: %d/%m/%y %H:%M " font "Helvetica,8" textcolor rgbcolor "#2a2a2a" 
	
	#'plot "lcurve.txt" using 2:3 notitle with linespoints'
	plot "${TSFILE}" u 2:3 title 'ew', "${TSFILE}" u 2:4  title 'up' 
	
	#pplot 'span.txt' with vectors nohead lt 1 lw 1.5 lc rgb '#4D4D4D' notitle, 'span1.txt' with points pt 7 ps 1.5 lc rgb '#4D4D4D' notitle
	#plot "lcurveNoLog.txt" u 2:3:1 w labels offset character 0,character 1 tc rgb "blue" notitle, "lcurveNoLog.txt" u 2:3 with lp notitle

EOF
gmt psconvert -Tj -A -E300 ${TSFILE}.eps
		else 
			# files are now generated by msbas3 and are as follow: 
			# MSBAS_ROW_COL_RADIUS_RADIUS.txt
			# and are filled with lines such as 
			# eg : 		20141017T162023 2014.793646 0.000000 0.000000 0.000000 0.000000
			# that is : dummy 			decimadate 	ew       rms_ew   up       rms_up
			# And one can use Sergey's script for plotting the time series:
			${PATH_SCRIPTS}/SCRIPTS_MT/msbas_plot_ts.sh ${TSFILE}
	fi
done 
